name: Deploy to EC2 via ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-20.04

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Decode EC2 SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY_B64 }}" | base64 -d > /tmp/chatbot_sa_key.pem
          chmod 600 /tmp/chatbot_sa_key.pem

      - name: Test SSH connection
        run: |
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "echo 'SSH connection successful'"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set image tags
        id: vars
        run: |
          echo "BOT_IMAGE=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}_bot:latest" >> "$GITHUB_OUTPUT"
          echo "CRAWLER_IMAGE=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}_crawler:latest" >> "$GITHUB_OUTPUT"
          echo "PARSER_IMAGE=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}_parser:latest" >> "$GITHUB_OUTPUT"
          echo "API_IMAGE=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}_api:latest" >> "$GITHUB_OUTPUT"

      - name: Install or Update AWS CLI (for act compatibility)
        run: |
          curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Create ECR repositories if they don't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }}_bot || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }}_bot
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }}_crawler || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }}_crawler
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }}_parser || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }}_parser
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }}_api || aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }}_api

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Pull existing images for build cache
        continue-on-error: true
        run: |
          docker pull ${{ steps.vars.outputs.BOT_IMAGE }}
          docker pull ${{ steps.vars.outputs.CRAWLER_IMAGE }}
          docker pull ${{ steps.vars.outputs.PARSER_IMAGE }}
          docker pull ${{ steps.vars.outputs.API_IMAGE }}

      - name: Build and push bot image
        uses: docker/build-push-action@v3
        with:
          context: ./bot
          push: true
          tags: ${{ steps.vars.outputs.BOT_IMAGE }}
          cache-from: type=registry,ref=${{ steps.vars.outputs.BOT_IMAGE }}
          cache-to: type=inline

      - name: Build and push crawler image
        uses: docker/build-push-action@v3
        with:
          context: ./crawlers/gringo_fetcher
          push: true
          tags: ${{ steps.vars.outputs.CRAWLER_IMAGE }}
          cache-from: type=registry,ref=${{ steps.vars.outputs.CRAWLER_IMAGE }}
          cache-to: type=inline

      - name: Build and push parser image
        uses: docker/build-push-action@v3
        with:
          context: ./crawlers/gringo_parser
          push: true
          tags: ${{ steps.vars.outputs.PARSER_IMAGE }}
          cache-from: type=registry,ref=${{ steps.vars.outputs.PARSER_IMAGE }}
          cache-to: type=inline

      - name: Build and push API image
        uses: docker/build-push-action@v3
        with:
          context: ./rag_api
          push: true
          tags: ${{ steps.vars.outputs.API_IMAGE }}
          cache-from: type=registry,ref=${{ steps.vars.outputs.API_IMAGE }}
          cache-to: type=inline

      - name: Prepare EC2 folder
        run: |
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /home/${{ secrets.EC2_USER }}/chatbot_sa"

      - name: Upload docker-compose.yml
        run: |
          scp -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            docker-compose.yml \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/chatbot_sa/docker-compose.yml

      - name: Create and upload .env file
        run: |
          mkdir -p /tmp/
          echo "EC2_HOST=${{ secrets.EC2_HOST }}" > /tmp/.env
          echo "EC2_USER=${{ secrets.EC2_USER }}" >> /tmp/.env
          echo "EC2_SSH_KEY_B64=${{ secrets.EC2_SSH_KEY_B64 }}" >> /tmp/.env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> /tmp/.env
          echo "TELEGRAM_WEBHOOK_MODE=${{ secrets.TELEGRAM_WEBHOOK_MODE }}" >> /tmp/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /tmp/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /tmp/.env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> /tmp/.env
          echo "ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}" >> /tmp/.env
          echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}" >> /tmp/.env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> /tmp/.env
          echo "POSTGRES_USER=postgres" >> /tmp/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> /tmp/.env
          echo "POSTGRES_DB=chatbot_sa" >> /tmp/.env
          echo "POSTGRES_HOST=db" >> /tmp/.env
          echo "POSTGRES_PORT=5432" >> /tmp/.env
          echo "REDIS_HOST=redis" >> /tmp/.env
          echo "REDIS_PORT=6379" >> /tmp/.env

          scp -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            /tmp/.env \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/chatbot_sa/.env

      - name: Ensure Docker Compose >= v2.20.2 on EC2
        run: |
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            'if ! command -v docker-compose >/dev/null; then
               echo "Docker Compose not found, installing...";
               INSTALL=1;
             elif [ "$(docker-compose version --short)" != "2.20.2" ]; then
               echo "Docker Compose version is outdated, updating...";
               INSTALL=1;
             else
               echo "Docker Compose is up to date.";
               INSTALL=0;
             fi;
             if [ "$INSTALL" = "1" ]; then
               sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64" \
                 -o /usr/local/bin/docker-compose && \
               sudo chmod +x /usr/local/bin/docker-compose && \
               docker-compose version;
             fi'

      - name: Deploy on EC2
        run: |
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "cd /home/${{ secrets.EC2_USER }}/chatbot_sa && \
             aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
               | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }} && \
             docker-compose up -d"

      - name: Configure EC2 Security Group
        run: |
          echo "Verifying EC2_HOST is set..."
          if [ -z "${{ secrets.EC2_HOST }}" ]; then
            echo "Error: EC2_HOST is not set"
            exit 1
          fi
          echo "Adding inbound rule for port 8000 to default security group..."
          AWS_PAGER="" aws ec2 authorize-security-group-ingress \
            --group-name default \
            --protocol tcp \
            --port 8000 \
            --cidr 0.0.0.0/0 || true
          echo "Adding inbound rule for port 8001 to default security group..."
          AWS_PAGER="" aws ec2 authorize-security-group-ingress \
            --group-name default \
            --protocol tcp \
            --port 8001 \
            --cidr 0.0.0.0/0 || true

      - name: Verify deployment
        run: |
          echo "Checking container status..."
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "docker ps"

          echo "Waiting for containers to start..."
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "sleep 10"

          echo "Checking container logs..."
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "docker logs chatbot_sa_bot && \
             docker logs gringo_fetcher && \
             docker logs gringo_parser"

          echo "Testing health endpoint locally..."
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "curl -v http://localhost:8000/health && \
             curl -v http://localhost:8001/health"

          echo "Testing health endpoint from public IP..."
          curl -v "http://${{ secrets.EC2_HOST }}:8000/health" && \
          curl -v "http://${{ secrets.EC2_HOST }}:8001/health"
        continue-on-error: false
