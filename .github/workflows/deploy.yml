name: Local Deploy with act (ECR + EC2)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-20.04

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set image tag
        id: vars
        run: echo "IMAGE=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest" >> "$GITHUB_OUTPUT"

      - name: Log in to Amazon ECR
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip > /dev/null
          sudo ./aws/install
          aws --version
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Pull existing image (if any) for cache
        continue-on-error: true
        run: |
          docker pull ${{ steps.vars.outputs.IMAGE }}

      - name: Build and push Docker image to ECR (optimized)
        uses: docker/build-push-action@v3
        with:
          context: ./bot
          push: true
          tags: ${{ steps.vars.outputs.IMAGE }}
          cache-from: type=registry,ref=${{ steps.vars.outputs.IMAGE }}
          cache-to: type=inline

      - name: Decode EC2 SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY_B64 }}" | base64 -d > /tmp/chatbot_sa_key.pem
          chmod 600 /tmp/chatbot_sa_key.pem

      - name: Deploy to EC2
        run: |
          ssh -i /tmp/chatbot_sa_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
            cd /home/ubuntu/src/chatbot_sa
            docker-compose pull telegram_bot
            docker-compose up -d telegram_bot
          EOF
